
// File: buildSrc/src/main/kotlin/com/your/company/jacoco/JacocoCustomExtension.kt
package com.your.company.jacoco

open class JacocoCustomExtension {
    var dependencyModule: String = ""
}

// File: buildSrc/src/main/kotlin/com/your/company/jacoco/JacocoCustomPlugin.kt
package com.your.company.jacoco

import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.kotlin.dsl.create
import org.gradle.kotlin.dsl.named
import org.gradle.testing.jacoco.tasks.JacocoReport
import org.gradle.testing.jacoco.tasks.JacocoCoverageVerification

class JacocoCustomPlugin : Plugin<Project> {
    override fun apply(project: Project) {
        // Créer l'extension pour la configuration
        val extension = project.extensions.create<JacocoCustomExtension>("jacocoCustom")

        // S'assurer que le plugin jacoco est appliqué
        project.plugins.apply("jacoco")

        project.afterEvaluate {
            require(extension.dependencyModule.isNotEmpty()) {
                "dependencyModule must be specified in jacocoCustom configuration"
            }

            // Configurer le rapport JaCoCo
            project.tasks.named<JacocoReport>("jacocoTestReport") {
                classDirectories.setFrom(files(
                    classDirectories.files,
                    project.project(extension.dependencyModule).buildDir.resolve("classes/java/main")
                ))
            }

            // Configurer la vérification JaCoCo
            project.tasks.named<JacocoCoverageVerification>("jacocoTestCoverageVerification") {
                classDirectories.setFrom(files(
                    classDirectories.files,
                    project.project(extension.dependencyModule).buildDir.resolve("classes/java/main")
                ))
            }
        }
    }
}

// File: buildSrc/src/main/kotlin/jacoco-custom.gradle.kts
import com.your.company.jacoco.JacocoCustomPlugin

apply<JacocoCustomPlugin>()

========
package com.your.company.jacoco

import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.testing.jacoco.tasks.JacocoReport
import org.gradle.testing.jacoco.tasks.JacocoCoverageVerification

// Définir l'extension pour la configuration
class JacocoCustomExtension {
    String dependencyModule = ""
}

// Définir le plugin personnalisé JaCoCo
class JacocoCustomPlugin implements Plugin<Project> {
    @Override
    void apply(Project project) {
        // Créer l'extension pour la configuration
        def extension = project.extensions.create("jacocoCustom", JacocoCustomExtension)

        // S'assurer que le plugin JaCoCo est appliqué
        project.plugins.apply("jacoco")

        project.afterEvaluate {
            // Vérifier que le module de dépendance est spécifié
            if (!extension.dependencyModule) {
                throw new IllegalArgumentException("dependencyModule must be specified in jacocoCustom configuration")
            }

            // Configurer le rapport JaCoCo
            project.tasks.named("jacocoTestReport", JacocoReport) { task ->
                task.classDirectories.setFrom(project.files(
                    task.classDirectories.files,
                    project.project(extension.dependencyModule).buildDir.toPath().resolve("classes/java/main").toFile()
                ))
            }

            // Configurer la vérification de couverture JaCoCo
            project.tasks.named("jacocoTestCoverageVerification", JacocoCoverageVerification) { task ->
                task.classDirectories.setFrom(project.files(
                    task.classDirectories.files,
                    project.project(extension.dependencyModule).buildDir.toPath().resolve("classes/java/main").toFile()
                ))
            }
        }
    }
}
